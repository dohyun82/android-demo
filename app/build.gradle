plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.protobuf'
}

android {
    namespace 'kr.co.rkwkgo.androiddemo'
    compileSdk 33

    buildFeatures {
        viewBinding true
        compose true
    }

    defaultConfig {
        applicationId "kr.co.rkwkgo.androiddemo"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        profile {
            initWith debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // 코틀린 확장 라이브러리
    implementation 'androidx.core:core-ktx:1.10.1'
    // Collection KTX
    implementation 'androidx.collection:collection-ktx:1.2.0'
    // Material Design 컴포넌트 제공 라이브러리 - 툴바, 네비게이션 드로어, 액션 버튼 등
    implementation 'androidx.appcompat:appcompat:1.6.1'
    // Material Design 컴포넌트 제공 라이브러리 - 버튼, 카드뷰(CardView), 스낵바(Snackbar), 텍스트필드(TextField) 등
    implementation 'com.google.android.material:material:1.8.0'
    // ConstraintLayout 뷰의 위치와 크기를 제어하여 UI 레이아웃 구성 라이브러리
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    // Activity 구성 하는데 필요한 클래스 함수 제공 라이브러리 - ActivityResultLauncher, lifecycleScope 코루틴,
    implementation "androidx.activity:activity-ktx:1.7.0"
    // Fragment 구성 하는데 필요한 클래스 함수를 제공 라이브러리 - FragmentManager, viewLifecycleOwner.lifecycleScope 코루틴
    implementation "androidx.fragment:fragment-ktx:1.6.1"

    // lifecycle 관련된 기능을 코틀린에서 쉽게 사용할 수 있도록 지원하는 라이브러리
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'

    // Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    // Typed DataStore
    implementation "androidx.datastore:datastore:1.0.0"
    // proto buffer : https://protobuf.dev/
    implementation "com.google.protobuf:protobuf-javalite:3.19.4"

    // Glide : https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.15.0'

    // flutter module
    debugImplementation 'kr.co.rkwkgo.module.my_flutter:flutter_debug:1.0'
    profileImplementation 'kr.co.rkwkgo.module.my_flutter:flutter_profile:1.0'
    releaseImplementation 'kr.co.rkwkgo.module.my_flutter:flutter_release:1.0'

    // Compose
    def composeBom = platform('androidx.compose:compose-bom:2023.06.01')
    implementation composeBom
    androidTestImplementation composeBom
    // Material Design 3
    implementation 'androidx.compose.material3:material3'
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    // Optional - Add full set of material icons
    implementation "androidx.compose.material:material-icons-extended"
    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.7.2'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'

    // 생체인증 라이브러리
    implementation 'androidx.biometric:biometric:1.1.0'

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

protobuf{
    protoc{
        artifact = "com.google.protobuf:protoc:3.19.4"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}